// Mocks generated by Mockito 5.2.0 from annotations
// in pokemon/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pokemon/domain/entities/app_error.dart' as _i7;
import 'package:pokemon/domain/entities/no_params.dart' as _i10;
import 'package:pokemon/domain/entities/pokemon_detail_entity.dart' as _i12;
import 'package:pokemon/domain/entities/pokemon_item_entity.dart' as _i9;
import 'package:pokemon/domain/repositories/pokemon_repository.dart' as _i2;
import 'package:pokemon/domain/usecases/favoritePokemon/check_if_pokemon_favorite.dart'
    as _i5;
import 'package:pokemon/domain/usecases/favoritePokemon/delete_favorite_pokemon.dart'
    as _i13;
import 'package:pokemon/domain/usecases/favoritePokemon/favorite_pokemon.dart'
    as _i11;
import 'package:pokemon/domain/usecases/favoritePokemon/get_favorite_pokemons.dart'
    as _i8;
import 'package:pokemon/presentation/mapper/pokemon_ui_mapper.dart' as _i14;
import 'package:pokemon/presentation/models/pokemon_list_ui.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePokemonRepository_0 extends _i1.Fake
    implements _i2.PokemonRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakePokemonListUi_2 extends _i1.Fake implements _i4.PokemonListUi {}

/// A class which mocks [CheckIfPokemonFav].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckIfPokemonFav extends _i1.Mock implements _i5.CheckIfPokemonFav {
  MockCheckIfPokemonFav() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePokemonRepository_0()) as _i2.PokemonRepository);
  @override
  _i6.Future<_i3.Either<_i7.AppError, bool>> call(int? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i7.AppError, bool>>.value(
                  _FakeEither_1<_i7.AppError, bool>()))
          as _i6.Future<_i3.Either<_i7.AppError, bool>>);
}

/// A class which mocks [GetFavoritePokemons].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavoritePokemons extends _i1.Mock
    implements _i8.GetFavoritePokemons {
  MockGetFavoritePokemons() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePokemonRepository_0()) as _i2.PokemonRepository);
  @override
  _i6.Future<_i3.Either<_i7.AppError, List<_i9.PokemonItemEntity>>> call(
          _i10.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<
                      _i3.Either<_i7.AppError,
                          List<_i9.PokemonItemEntity>>>.value(
                  _FakeEither_1<_i7.AppError, List<_i9.PokemonItemEntity>>()))
          as _i6.Future<_i3.Either<_i7.AppError, List<_i9.PokemonItemEntity>>>);
}

/// A class which mocks [AddFavorite].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddFavorite extends _i1.Mock implements _i11.AddFavorite {
  MockAddFavorite() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePokemonRepository_0()) as _i2.PokemonRepository);
  @override
  _i6.Future<_i3.Either<_i7.AppError, void>> call(
          _i12.PokemonDetailEntity? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i7.AppError, void>>.value(
                  _FakeEither_1<_i7.AppError, void>()))
          as _i6.Future<_i3.Either<_i7.AppError, void>>);
}

/// A class which mocks [DeleteFavoritePokemon].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteFavoritePokemon extends _i1.Mock
    implements _i13.DeleteFavoritePokemon {
  MockDeleteFavoritePokemon() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePokemonRepository_0()) as _i2.PokemonRepository);
  @override
  _i6.Future<_i3.Either<_i7.AppError, void>> call(int? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i7.AppError, void>>.value(
                  _FakeEither_1<_i7.AppError, void>()))
          as _i6.Future<_i3.Either<_i7.AppError, void>>);
}

/// A class which mocks [PokemonUiMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonUiMapper extends _i1.Mock implements _i14.PokemonUiMapper {
  MockPokemonUiMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.PokemonListUi> maps(List<_i9.PokemonItemEntity>? items) =>
      (super.noSuchMethod(Invocation.method(#maps, [items]),
          returnValue: <_i4.PokemonListUi>[]) as List<_i4.PokemonListUi>);
  @override
  _i4.PokemonListUi mapItem(_i9.PokemonItemEntity? item) =>
      (super.noSuchMethod(Invocation.method(#mapItem, [item]),
          returnValue: _FakePokemonListUi_2()) as _i4.PokemonListUi);
  @override
  int getNumber(String? url) =>
      (super.noSuchMethod(Invocation.method(#getNumber, [url]), returnValue: 0)
          as int);
}
