// Mocks generated by Mockito 5.2.0 from annotations
// in pokemon/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i11;

import 'package:bloc/bloc.dart' as _i19;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pokemon/domain/entities/app_error.dart' as _i12;
import 'package:pokemon/domain/entities/no_params.dart' as _i14;
import 'package:pokemon/domain/entities/pokemon_detail_entity.dart' as _i15;
import 'package:pokemon/domain/entities/pokemon_item_entity.dart' as _i13;
import 'package:pokemon/domain/repositories/pokemon_repository.dart' as _i2;
import 'package:pokemon/domain/usecases/favoritePokemon/check_if_pokemon_favorite.dart'
    as _i7;
import 'package:pokemon/domain/usecases/favoritePokemon/delete_favorite_pokemon.dart'
    as _i6;
import 'package:pokemon/domain/usecases/favoritePokemon/add_favorite.dart'
    as _i5;
import 'package:pokemon/domain/usecases/favoritePokemon/get_favorite_pokemons.dart'
    as _i9;
import 'package:pokemon/domain/usecases/fetchAll/fetch_all_pokemon.dart'
    as _i20;
import 'package:pokemon/domain/usecases/fetchPokemon/fetch_pokemon.dart'
    as _i17;
import 'package:pokemon/presentation/bloc/toggle_favorite/favorite_cubit.dart'
    as _i10;
import 'package:pokemon/presentation/mapper/detail_ui_mapper.dart' as _i18;
import 'package:pokemon/presentation/mapper/pokemon_ui_mapper.dart' as _i8;
import 'package:pokemon/presentation/models/pokemon_detail_ui.dart' as _i4;
import 'package:pokemon/presentation/models/pokemon_list_ui.dart' as _i16;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePokemonRepository_0 extends _i1.Fake
    implements _i2.PokemonRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeUiPokemonDetail_2 extends _i1.Fake implements _i4.UiPokemonDetail {}

class _FakeAddFavorite_3 extends _i1.Fake implements _i5.AddFavorite {}

class _FakeDeleteFavoritePokemon_4 extends _i1.Fake
    implements _i6.DeleteFavoritePokemon {}

class _FakeCheckIfPokemonFav_5 extends _i1.Fake
    implements _i7.CheckIfPokemonFav {}

class _FakePokemonUiMapper_6 extends _i1.Fake implements _i8.PokemonUiMapper {}

class _FakeGetFavoritePokemons_7 extends _i1.Fake
    implements _i9.GetFavoritePokemons {}

class _FakeFavoriteState_8 extends _i1.Fake implements _i10.FavoriteState {}

/// A class which mocks [CheckIfPokemonFav].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckIfPokemonFav extends _i1.Mock implements _i7.CheckIfPokemonFav {
  MockCheckIfPokemonFav() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePokemonRepository_0()) as _i2.PokemonRepository);
  @override
  _i11.Future<_i3.Either<_i12.AppError, bool>> call(int? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i12.AppError, bool>>.value(
                  _FakeEither_1<_i12.AppError, bool>()))
          as _i11.Future<_i3.Either<_i12.AppError, bool>>);
}

/// A class which mocks [GetFavoritePokemons].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavoritePokemons extends _i1.Mock
    implements _i9.GetFavoritePokemons {
  MockGetFavoritePokemons() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePokemonRepository_0()) as _i2.PokemonRepository);
  @override
  _i11.Future<_i3.Either<_i12.AppError, List<_i13.PokemonItemEntity>>> call(
          _i14.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<
                      _i3.Either<_i12.AppError,
                          List<_i13.PokemonItemEntity>>>.value(
                  _FakeEither_1<_i12.AppError, List<_i13.PokemonItemEntity>>()))
          as _i11.Future<_i3.Either<_i12.AppError, List<_i13.PokemonItemEntity>>>);
}

/// A class which mocks [AddFavorite].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddFavorite extends _i1.Mock implements _i5.AddFavorite {
  MockAddFavorite() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePokemonRepository_0()) as _i2.PokemonRepository);
  @override
  _i11.Future<_i3.Either<_i12.AppError, void>> call(
          _i15.PokemonDetailEntity? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i12.AppError, void>>.value(
                  _FakeEither_1<_i12.AppError, void>()))
          as _i11.Future<_i3.Either<_i12.AppError, void>>);
}

/// A class which mocks [DeleteFavoritePokemon].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteFavoritePokemon extends _i1.Mock
    implements _i6.DeleteFavoritePokemon {
  MockDeleteFavoritePokemon() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePokemonRepository_0()) as _i2.PokemonRepository);
  @override
  _i11.Future<_i3.Either<_i12.AppError, void>> call(int? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i12.AppError, void>>.value(
                  _FakeEither_1<_i12.AppError, void>()))
          as _i11.Future<_i3.Either<_i12.AppError, void>>);
}

/// A class which mocks [PokemonUiMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonUiMapper extends _i1.Mock implements _i8.PokemonUiMapper {
  MockPokemonUiMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i16.PokemonListUi> maps(List<_i13.PokemonItemEntity>? items) =>
      (super.noSuchMethod(Invocation.method(#maps, [items]),
          returnValue: <_i16.PokemonListUi>[]) as List<_i16.PokemonListUi>);
}

/// A class which mocks [FetchPokemon].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPokemon extends _i1.Mock implements _i17.FetchPokemon {
  MockFetchPokemon() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePokemonRepository_0()) as _i2.PokemonRepository);
  @override
  _i11.Future<_i3.Either<_i12.AppError, _i15.PokemonDetailEntity>> call(
          int? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<
                  _i3.Either<_i12.AppError, _i15.PokemonDetailEntity>>.value(
              _FakeEither_1<_i12.AppError, _i15.PokemonDetailEntity>())) as _i11
          .Future<_i3.Either<_i12.AppError, _i15.PokemonDetailEntity>>);
}

/// A class which mocks [DetailUiMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailUiMapper extends _i1.Mock implements _i18.DetailUiMapper {
  MockDetailUiMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UiPokemonDetail mapItem(_i15.PokemonDetailEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#mapItem, [entity]),
          returnValue: _FakeUiPokemonDetail_2()) as _i4.UiPokemonDetail);
}

/// A class which mocks [FavoriteCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteCubit extends _i1.Mock implements _i10.FavoriteCubit {
  MockFavoriteCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AddFavorite get addFavorite =>
      (super.noSuchMethod(Invocation.getter(#addFavorite),
          returnValue: _FakeAddFavorite_3()) as _i5.AddFavorite);
  @override
  _i6.DeleteFavoritePokemon get deleteFavorite =>
      (super.noSuchMethod(Invocation.getter(#deleteFavorite),
              returnValue: _FakeDeleteFavoritePokemon_4())
          as _i6.DeleteFavoritePokemon);
  @override
  _i7.CheckIfPokemonFav get checkIfPokemonFav =>
      (super.noSuchMethod(Invocation.getter(#checkIfPokemonFav),
          returnValue: _FakeCheckIfPokemonFav_5()) as _i7.CheckIfPokemonFav);
  @override
  _i8.PokemonUiMapper get uiMapper =>
      (super.noSuchMethod(Invocation.getter(#uiMapper),
          returnValue: _FakePokemonUiMapper_6()) as _i8.PokemonUiMapper);
  @override
  _i9.GetFavoritePokemons get getFavoritePokemons => (super.noSuchMethod(
      Invocation.getter(#getFavoritePokemons),
      returnValue: _FakeGetFavoritePokemons_7()) as _i9.GetFavoritePokemons);
  @override
  _i10.FavoriteState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeFavoriteState_8()) as _i10.FavoriteState);
  @override
  _i11.Stream<_i10.FavoriteState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.FavoriteState>.empty())
          as _i11.Stream<_i10.FavoriteState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void toggleFavorite(_i4.UiPokemonDetail? model, bool? isFav) =>
      super.noSuchMethod(Invocation.method(#toggleFavorite, [model, isFav]),
          returnValueForMissingStub: null);
  @override
  void checkIsPokemonFavorite(int? id) =>
      super.noSuchMethod(Invocation.method(#checkIsPokemonFavorite, [id]),
          returnValueForMissingStub: null);
  @override
  void getFavorites() =>
      super.noSuchMethod(Invocation.method(#getFavorites, []),
          returnValueForMissingStub: null);
  @override
  void emit(_i10.FavoriteState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i19.Change<_i10.FavoriteState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
}

/// A class which mocks [FetchAllPokemon].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchAllPokemon extends _i1.Mock implements _i20.FetchAllPokemon {
  MockFetchAllPokemon() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePokemonRepository_0()) as _i2.PokemonRepository);
  @override
  _i11.Future<_i3.Either<_i12.AppError, List<_i13.PokemonItemEntity>>> call(
          _i14.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<
                      _i3.Either<_i12.AppError,
                          List<_i13.PokemonItemEntity>>>.value(
                  _FakeEither_1<_i12.AppError, List<_i13.PokemonItemEntity>>()))
          as _i11.Future<_i3.Either<_i12.AppError, List<_i13.PokemonItemEntity>>>);
}

/// A class which mocks [PokemonRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonRepository extends _i1.Mock implements _i2.PokemonRepository {
  MockPokemonRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i3.Either<_i12.AppError, List<_i13.PokemonItemEntity>>>
      getPokemons() => (super.noSuchMethod(Invocation.method(#getPokemons, []),
              returnValue: Future<
                      _i3.Either<_i12.AppError,
                          List<_i13.PokemonItemEntity>>>.value(
                  _FakeEither_1<_i12.AppError, List<_i13.PokemonItemEntity>>()))
          as _i11.Future<_i3.Either<_i12.AppError, List<_i13.PokemonItemEntity>>>);
  @override
  _i11.Future<_i3.Either<_i12.AppError, List<_i13.PokemonItemEntity>>>
      getFavoritePokemons() => (super.noSuchMethod(
          Invocation.method(#getFavoritePokemons, []),
          returnValue:
              Future<_i3.Either<_i12.AppError, List<_i13.PokemonItemEntity>>>.value(
                  _FakeEither_1<_i12.AppError,
                      List<_i13.PokemonItemEntity>>())) as _i11
          .Future<_i3.Either<_i12.AppError, List<_i13.PokemonItemEntity>>>);
  @override
  _i11.Future<_i3.Either<_i12.AppError, _i15.PokemonDetailEntity>> getPokemon(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getPokemon, [id]),
          returnValue: Future<
                  _i3.Either<_i12.AppError, _i15.PokemonDetailEntity>>.value(
              _FakeEither_1<_i12.AppError, _i15.PokemonDetailEntity>())) as _i11
          .Future<_i3.Either<_i12.AppError, _i15.PokemonDetailEntity>>);
  @override
  _i11.Future<_i3.Either<_i12.AppError, void>> savePokemon(
          _i15.PokemonDetailEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#savePokemon, [entity]),
              returnValue: Future<_i3.Either<_i12.AppError, void>>.value(
                  _FakeEither_1<_i12.AppError, void>()))
          as _i11.Future<_i3.Either<_i12.AppError, void>>);
  @override
  _i11.Future<_i3.Either<_i12.AppError, void>> deleteFavPokemon(int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteFavPokemon, [id]),
              returnValue: Future<_i3.Either<_i12.AppError, void>>.value(
                  _FakeEither_1<_i12.AppError, void>()))
          as _i11.Future<_i3.Either<_i12.AppError, void>>);
  @override
  _i11.Future<_i3.Either<_i12.AppError, bool>> checkIfPokemonFav(int? id) =>
      (super.noSuchMethod(Invocation.method(#checkIfPokemonFav, [id]),
              returnValue: Future<_i3.Either<_i12.AppError, bool>>.value(
                  _FakeEither_1<_i12.AppError, bool>()))
          as _i11.Future<_i3.Either<_i12.AppError, bool>>);
}
